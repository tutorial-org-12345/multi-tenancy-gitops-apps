---
# Source: mq-infra-2/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: mqsc-configmap-qm2
data:
  config.mqsc: |+
    DEFINE QLOCAL(IBM.DEMO.Q.QM2.TESTQ) BOQNAME(IBM.DEMO.Q.BOQ) BOTHRESH(3) REPLACE
    DEFINE QLOCAL(IBM.DEMO.Q) BOQNAME(IBM.DEMO.Q.BOQ) BOTHRESH(3) REPLACE
    DEFINE QLOCAL(IBM.DEMO.Q.BOQ) REPLACE
    * Use a different dead letter queue, for undeliverable messages
    DEFINE QLOCAL('DEV.DEAD.LETTER.QUEUE') REPLACE
    ALTER QMGR DEADQ('DEV.DEAD.LETTER.QUEUE')
    DEFINE CHANNEL('IBM.APP.SVRCONN') CHLTYPE(SVRCONN)
    ALTER QMGR CHLAUTH (DISABLED)
    DEFINE CHANNEL('MONITORING_CHL') CHLTYPE(SVRCONN)
    SET CHLAUTH(MONITORING_CHL) TYPE(BLOCKUSER) USERLIST(NOBODY)
    REFRESH SECURITY TYPE(CONNAUTH)
  
    *******************************************************************************
    * Script generated on 2022-03-18   at 11.04.23
    * Script generated by user 'metaylor' on host 'klein'
    * Queue manager name: QM2
    * Queue manager platform: UNIX
    * Queue manager command level: (925/925) XRCAP(YES) AMQPCAP(YES)
    * Command issued: dmpmqcfg -m QM2
    *******************************************************************************
    ALTER QMGR +
    *  ADVCAP(ENABLED) +
    *  ALTDATE(2022-02-22) +
    *  ALTTIME(12.20.23) +
    *  AMQPCAP(YES) +
       CCSID(819) +
    **   CERTLABL('ibmwebspheremqqm1') +
       CLWLUSEQ(LOCAL) +
    *  COMMANDQ(SYSTEM.ADMIN.COMMAND.QUEUE) +
       CONFIGEV(ENABLED) +
       CONNAUTH('PAM') +
    *  CRDATE(2022-02-22) +
    *  CRTIME(12.15.15) +
       DEADQ('SYSTEM.DEAD.LETTER.QUEUE') +
       DESCR('X') +
       LOCALEV(ENABLED) +
       MONQ(HIGH) +
       PERFMEV(ENABLED) +
    *  QMID(QM2_2022-02-22_12.15.15) +
    *  SPLCAP(ENABLED) +
       SSLCRYP(' ') +
    **   SSLKEYR('/var/mqm/qmgrs/QM1/ssl/key') +
       STATINT(180) +
       SUITEB(NONE) +
    *  VERSION(09020500) +
    *  XRCAP(YES) +
       FORCE
    DEFINE QLOCAL('APP.0') +
    *  ALTDATE(2022-02-22) +
    *  ALTTIME(12.20.23) +
    *  CRDATE(2022-02-22) +
    *  CRTIME(12.20.23) +
       DEFPSIST(YES) +
       DISTL(NO) +
       MAXDEPTH(5000) +
       REPLACE
    DEFINE QALIAS('APP.0.A') +
    *  ALTDATE(2022-02-22) +
    *  ALTTIME(12.20.24) +
       DEFPSIST(YES) +
       REPLACE
    DEFINE QLOCAL('APP.1') +
    *  ALTDATE(2022-02-22) +
    *  ALTTIME(12.20.24) +
    *  CRDATE(2022-02-22) +
    *  CRTIME(12.20.24) +
       DEFPSIST(YES) +
       DISTL(NO) +
       MAXDEPTH(5000) +
       REPLACE
    DEFINE QALIAS('APP.1.A') +
    *  ALTDATE(2022-02-22) +
    *  ALTTIME(12.20.25) +
       DEFPSIST(YES) +
       REPLACE
    DEFINE QLOCAL('APP.2') +
    *  ALTDATE(2022-02-22) +
    *  ALTTIME(12.20.25) +
    *  CRDATE(2022-02-22) +
    *  CRTIME(12.20.25) +
       DEFPSIST(YES) +
       DISTL(NO) +
       MAXDEPTH(5000) +
       REPLACE
    DEFINE QALIAS('APP.2.A') +
    *  ALTDATE(2022-02-22) +
    *  ALTTIME(12.20.25) +
       DEFPSIST(YES) +
       REPLACE
    DEFINE QLOCAL('APP.3') +
    *  ALTDATE(2022-02-22) +
    *  ALTTIME(12.20.26) +
    *  CRDATE(2022-02-22) +
    *  CRTIME(12.20.26) +
       DEFPSIST(YES) +
       DISTL(NO) +
       MAXDEPTH(5000) +
       REPLACE
    DEFINE QALIAS('APP.3.A') +
    *  ALTDATE(2022-02-22) +
    *  ALTTIME(12.20.26) +
       DEFPSIST(YES) +
       REPLACE
    DEFINE QLOCAL('APP.4') +
    *  ALTDATE(2022-02-22) +
    *  ALTTIME(12.20.27) +
    *  CRDATE(2022-02-22) +
    *  CRTIME(12.20.27) +
       DEFPSIST(YES) +
       DISTL(NO) +
       MAXDEPTH(5000) +
       REPLACE
    DEFINE QALIAS('APP.4.A') +
    *  ALTDATE(2022-02-22) +
    *  ALTTIME(12.20.27) +
       DEFPSIST(YES) +
       REPLACE
    DEFINE QREMOTE('LOOP.RETURN') +
    *  ALTDATE(2022-02-22) +
    *  ALTTIME(12.20.30) +
       RQMNAME('QM1') +
       RNAME('LOOP.OUTPUT') +
       XMITQ(' ') +
       REPLACE
    DEFINE QLOCAL('QM1') +
    *  ALTDATE(2022-02-22) +
    *  ALTTIME(12.20.30) +
    *  CRDATE(2022-02-22) +
    *  CRTIME(12.20.30) +
       INITQ('SYSTEM.CHANNEL.INITQ') +
    *  IPPROCS(1) +
       MAXDEPTH(5000) +
       TRIGGER +
    *  OPPROCS(2) +
       USAGE(XMITQ) +
       REPLACE
  
  
    DEFINE CHANNEL('SYSTEM.ADMIN.SVRCONN') +
       CHLTYPE(SVRCONN) +
    *  ALTDATE(2022-02-22) +
    *  ALTTIME(12.20.44) +
       TRPTYPE(TCP) +
       REPLACE
  
    DEFINE CHANNEL('TO.QM1') +
       CHLTYPE(SDR) +
    *  ALTDATE(2022-02-22) +
    *  ALTTIME(12.20.46) +
       CONNAME('qm1-ibm-mq.dev.svc.cluster.local(1414)') +
       TRPTYPE(TCP) +
       XMITQ('QM1') +
       REPLACE
    DEFINE CHANNEL('TO.QM2') +
       CHLTYPE(RCVR) +
    *  ALTDATE(2022-02-22) +
    *  ALTTIME(12.20.47) +
       TRPTYPE(TCP) +
       REPLACE
  
    DEFINE AUTHINFO('PAM') +
       AUTHTYPE(IDPWOS) +
       ADOPTCTX(YES) +
       CHCKCLNT(OPTIONAL) +
       AUTHENMD(PAM) +
    *  ALTDATE(2022-02-22) +
    *  ALTTIME(12.20.48) +
       REPLACE
  
    DEFINE LISTENER('SYSTEM.DEFAULT.LISTENER.TCP') +
       TRPTYPE(TCP) +
       CONTROL(QMGR) +
       PORT(1414) +
    *  ALTDATE(2022-02-22) +
    *  ALTTIME(12.20.48) +
       REPLACE
    **DEFINE SERVICE('MQPROMETHEUS') +
    **   SERVTYPE(SERVER) +
    **   STARTCMD('/usr/local/bin/mqgo/mq_prometheus.sh') +
    **   STARTARG('+QMNAME+') +
    **   STOPCMD('/usr/bin/kill') +
    **   STOPARG('+MQ_SERVER_PID+') +
    **   STDOUT('/var/mqm/errors/mq_prometheus.out') +
    **   STDERR('/var/mqm/errors/mq_prometheus.out') +
    **   DESCR('MQ exporter for Prometheus') +
    *  ALTDATE(2022-02-22) +
    *  ALTTIME(12.20.48) +
    **   REPLACE
  
    **SET CHLAUTH('SYSTEM.ADMIN.SVRCONN') +
    **   TYPE(ADDRESSMAP) +
    **   DESCR('Default rule to allow MQ Explorer access') +
    **   ADDRESS('*') +
    **   USERSRC(CHANNEL) +
    *  ALTDATE(2022-02-22) +
    *  ALTTIME(12.16.02) +
    **   ACTION(REPLACE)
  
    **SET CHLAUTH('SYSTEM.*') +
    **   TYPE(ADDRESSMAP) +
    **   DESCR('Default rule to disable all SYSTEM channels') +
    **   ADDRESS('*') +
    **   USERSRC(NOACCESS) +
    *  ALTDATE(2022-02-22) +
    *  ALTTIME(12.16.02) +
    **   ACTION(REPLACE)
    **SET CHLAUTH('*') +
    **   TYPE(USERMAP) +
    **   CLNTUSER('MARKTAYLOR') +
    **   MCAUSER('metaylor') +
    **   USERSRC(MAP) +
    *  ALTDATE(2022-02-22) +
    *  ALTTIME(12.20.50) +
    **   ACTION(REPLACE)
    **SET CHLAUTH('*') +
    **   TYPE(USERMAP) +
    **   CLNTUSER('MARKTaylor') +
    **   MCAUSER('metaylor') +
    **   USERSRC(MAP) +
    *  ALTDATE(2022-02-22) +
    *  ALTTIME(12.20.50) +
    **   ACTION(REPLACE)
    **SET CHLAUTH('*') +
    **   TYPE(USERMAP) +
    **   CLNTUSER('marktaylor') +
    **   MCAUSER('metaylor') +
    **   USERSRC(MAP) +
    *  ALTDATE(2022-02-22) +
    *  ALTTIME(12.20.50) +
    **   ACTION(REPLACE)
  
    **SET CHLAUTH('*') +
    **   TYPE(BLOCKUSER) +
    **   DESCR('Default rule to disallow privileged users') +
    **   USERLIST('*MQADMIN') +
    *  ALTDATE(2022-02-22) +
    *  ALTTIME(12.16.02) +
    **   ACTION(REPLACE)
  
    **SET CHLAUTH('*') +
    **   TYPE(BLOCKADDR) +
    **   DESCR('MAD probe block') +
    **   ADDRLIST('9.20.135.*' +
    **           ,'9.20.225.*') +
    *  ALTDATE(2022-02-22) +
    *  ALTTIME(12.20.50) +
    **   ACTION(REPLACE)
